<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>wordpress advanced unit tests on Codetab</title><link>https://www.codetab.org/tags/wordpress-advanced-unit-tests/</link><description>Recent content in wordpress advanced unit tests on Codetab</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 11 Jan 2019 13:36:00 +0530</lastBuildDate><atom:link href="https://www.codetab.org/tags/wordpress-advanced-unit-tests/index.xml" rel="self" type="application/rss+xml"/><item><title>Advanced Unit Tests - WordPress Plugin Development - CodeTab</title><link>https://www.codetab.org/tutorial/wordpress-plugin-development/unit-test/advanced-unit-tests/</link><pubDate>Fri, 11 Jan 2019 13:36:00 +0530</pubDate><guid>https://www.codetab.org/tutorial/wordpress-plugin-development/unit-test/advanced-unit-tests/</guid><description>12.5.Â WordPress Advanced Unit Tests In the previous blog we saw tests that uses WordPress API functions to investigate the outcome of a method. However, such WordPress functions which are helpful to write tests are few, and to test majority of plugin methods, we need to rely on WordPress global variables and classes. Many WordPress functions store information in global variables or in classes which is used later to construct the output i.</description></item></channel></rss>