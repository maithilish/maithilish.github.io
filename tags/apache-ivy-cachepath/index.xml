<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>apache ivy cachepath on Codetab</title>
    <link>https://www.codetab.org/tags/apache-ivy-cachepath/</link>
    <description>Recent content in apache ivy cachepath on Codetab</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 10 Jan 2019 22:18:00 +0530</lastBuildDate>
    
	<atom:link href="https://www.codetab.org/tags/apache-ivy-cachepath/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Cachepath â€“ Apache Ivy Tutorial - CodeTab</title>
      <link>https://www.codetab.org/tutorial/apache-ivy/cachepath-retrieve/</link>
      <pubDate>Thu, 10 Jan 2019 22:18:00 +0530</pubDate>
      
      <guid>https://www.codetab.org/tutorial/apache-ivy/cachepath-retrieve/</guid>
      <description>In the last chapter we worked with &amp;lt;ivy:resolve&amp;gt;, which resolves the dependencies indicated in ivy.xml file and places the resolved modules in the cache. But it does not link the dependencies to the project build path. To expose the dependencies to the Java build path, Apache Ivy provides two Ant tasks .
  &amp;lt;ivy:cachepath&amp;gt; task
  &amp;lt;ivy:retrieve&amp;gt; task
  Apache Ivy Cachepath Task
&amp;lt;ivy:cachepath&amp;gt; constructs an Ant classpath consisting of resolved artifacts in the cache.</description>
    </item>
    
  </channel>
</rss>