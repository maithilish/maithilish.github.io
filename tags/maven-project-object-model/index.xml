<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>maven project object model on Codetab</title><link>https://www.codetab.org/tags/maven-project-object-model/</link><description>Recent content in maven project object model on Codetab</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 11 Jan 2019 17:00:00 +0530</lastBuildDate><atom:link href="https://www.codetab.org/tags/maven-project-object-model/index.xml" rel="self" type="application/rss+xml"/><item><title>Project Object Model - POM - Apache Maven Tutorial â€“ CodeTab</title><link>https://www.codetab.org/tutorial/apache-maven/plugins/maven-project-object-model/</link><pubDate>Fri, 11 Jan 2019 17:00:00 +0530</pubDate><guid>https://www.codetab.org/tutorial/apache-maven/plugins/maven-project-object-model/</guid><description>Maven Project Object Model So far in the handbook, we used bit and pieces of Maven POM (pom.xml) without going to deep into the subject. In this section, we formally introduce Maven Project Object Model (POM), one of the central concept of Maven. Having gone through other concepts such as lifecycle phase, plugins and goals, we can now put many aspects of POM into perspective than before.
In POM, we declare project&amp;rsquo;s identity and structure, configure builds, and relate projects to one another.</description></item></channel></rss>