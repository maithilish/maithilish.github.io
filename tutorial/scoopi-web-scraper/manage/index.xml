<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Manage on Codetab</title><link>https://www.codetab.org/tutorial/scoopi-web-scraper/manage/</link><description>Recent content in Manage on Codetab</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Thu, 05 Nov 2020 01:36:00 +0530</lastBuildDate><atom:link href="https://www.codetab.org/tutorial/scoopi-web-scraper/manage/index.xml" rel="self" type="application/rss+xml"/><item><title>Persistence - Scoopi Web Scraper - why just scrape when you can scoop</title><link>https://www.codetab.org/tutorial/scoopi-web-scraper/manage/persistence/</link><pubDate>Thu, 05 Nov 2020 01:02:00 +0530</pubDate><guid>https://www.codetab.org/tutorial/scoopi-web-scraper/manage/persistence/</guid><description>Persistence With persistence, Scoopi offers following benefits.
reduce network usage by reusing the downloaded pages recover from the aborted run by skipping the tasks already completed avoid expensive parse operation by reuse of persisted data set expiry date for each page Enable Persistence By default persistence is disabled in Scoopi through configuration setting scoopi.datastore.enable=false in conf/scoopi.properties file. To enable persistence, either set the property scoopi.datastore.enable=true or hash it out. By default, the scoopi objects are persisted in data/ directory and it is configurable through scoopi.</description></item><item><title>Split Definitions - Scoopi Web Scraper - why just scrape when you can scoop</title><link>https://www.codetab.org/tutorial/scoopi-web-scraper/manage/split-definitions/</link><pubDate>Thu, 05 Nov 2020 01:18:00 +0530</pubDate><guid>https://www.codetab.org/tutorial/scoopi-web-scraper/manage/split-definitions/</guid><description>Split Definitions The Scoopi definition file tends to grow as you scrape multiple types of data or large set of links. This chapter explains how to split the definitions into multiple files for easy maintenance.
Scoopi allows you to split the definitions either on job types or on top level elements.
Split on Job Types The examples so far scraped BS, PL, snapshot data - price and snapshot - of Acme.</description></item><item><title>Logs - Scoopi Web Scraper - why just scrape when you can scoop</title><link>https://www.codetab.org/tutorial/scoopi-web-scraper/manage/logs/</link><pubDate>Thu, 05 Nov 2020 01:29:00 +0530</pubDate><guid>https://www.codetab.org/tutorial/scoopi-web-scraper/manage/logs/</guid><description>Logs Scoopi uses Log4j2 library for logging. By default, it logs info message to console and log errors to logs/error.log file.
Debug and Trace logs The log configuration file log4j2.xml is located in conf folder. By default root log level is info which outputs error, warn and info logs.
To output debug logs, change root level to debug and un-comment appender-ref ref=&amp;ldquo;debuglog&amp;rdquo; element. and similarly, for trace logs. The trace logs output query and parsed html nodes which is helpful to construct query strings.</description></item><item><title>Dashboard - Scoopi Web Scraper - why just scrape when you can scoop</title><link>https://www.codetab.org/tutorial/scoopi-web-scraper/manage/dashboard/</link><pubDate>Thu, 05 Nov 2020 01:36:00 +0530</pubDate><guid>https://www.codetab.org/tutorial/scoopi-web-scraper/manage/dashboard/</guid><description>Dashboard Scoopi Dashboard is an nice little Angular web app that displays useful information such as system, task and pool stats.
The screenshot of the Scoopi dashboard is
Embedded Jetty Web Server serves the dashboard and we can access the Scoopi dashboard at http://localhost:9010 while Scoopi is running. The dashboard can kept running even after scoopi is finished and use the same one for next run as it stops when scoopi terminates and refreshes itself once it detects that scoopi is running again.</description></item></channel></rss>