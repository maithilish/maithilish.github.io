<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Gotz ETL - Gotz ETL - CodeTab on Codetab</title>
    <link>https://www.codetab.org/tutorial/gotz-etl/</link>
    <description>Recent content in Gotz ETL - Gotz ETL - CodeTab on Codetab</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 11 Jan 2019 18:43:00 +0530</lastBuildDate>
    
	<atom:link href="https://www.codetab.org/tutorial/gotz-etl/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Installation - Gotz ETL - CodeTab</title>
      <link>https://www.codetab.org/tutorial/gotz-etl/gotz-installation-quick-start/</link>
      <pubDate>Fri, 11 Jan 2019 19:02:00 +0530</pubDate>
      
      <guid>https://www.codetab.org/tutorial/gotz-etl/gotz-installation-quick-start/</guid>
      <description>If you use Docker to run applications, then the easiest way install Gotz is to pull its image from DockerHub and run it straight away with an added convince that it comes MariaDB preconfigured. In case, you are not using Docker then you can also download its release from GitHub. We explain both the options here.
Install Gotz from Docker Image Gotz releases are available as docker image from DockerHub.</description>
    </item>
    
    <item>
      <title>Introduction - Gotz ETL - CodeTab</title>
      <link>https://www.codetab.org/tutorial/gotz-etl/introduction/</link>
      <pubDate>Fri, 11 Jan 2019 18:43:00 +0530</pubDate>
      
      <guid>https://www.codetab.org/tutorial/gotz-etl/introduction/</guid>
      <description>&amp;nbsp;   (adsbygoogle = window.adsbygoogle || []).push({});  &amp;nbsp; CodeTab Gotz ETL Gotz ETL is a tool to extract data from HTML pages. In Java, it&amp;rsquo;s easy to scrape web pages with libraries such as JSoup and HtmlUnit, but the task become daunting when we try to scrape data from huge set of pages.
Some of the challenges while extracting large set of data from unstructured sources such as HTML pages are:</description>
    </item>
    
    <item>
      <title>Bean Locator - Gotz ETL - CodeTab</title>
      <link>https://www.codetab.org/tutorial/gotz-etl/bean-locator/</link>
      <pubDate>Fri, 11 Jan 2019 18:51:00 +0530</pubDate>
      
      <guid>https://www.codetab.org/tutorial/gotz-etl/bean-locator/</guid>
      <description>Gotz uses set of definition files to extract data from HTML pages. As HTML pages are unstructured in nature, the definition to extract and handle data can become quite complex. To learn the XML elements used by the definition files, Gotz distribution comes with a set of examples which are under def/examples folder. Examples are named as ex-1, ex-2 and so on, each with increasing complexity.
Gotz Definition Files Gotz creates the data model based on XML definition files.</description>
    </item>
    
    <item>
      <title>DataDef Axis Member - Gotz ETL - CodeTab</title>
      <link>https://www.codetab.org/tutorial/gotz-etl/datadef-axis-member/</link>
      <pubDate>Fri, 11 Jan 2019 19:13:00 +0530</pubDate>
      
      <guid>https://www.codetab.org/tutorial/gotz-etl/datadef-axis-member/</guid>
      <description>Gotz uses datadef to define data. Datadef contains axis, query, script and members which collectively defines the data to be scrapped from the HTML page.
The job.xml in Example 1 uses a simple DataDef which scrape one data point i.e. price of the company&amp;rsquo;s share from defs/examples/page/acme-quote.html page.
The datadef snippet from defs/examples/jsoup/ex-1/job.xml is as below
&amp;lt;dataDef name=&amp;#34;price&amp;#34;&amp;gt; &amp;lt;axis name=&amp;#34;col&amp;#34;&amp;gt; &amp;lt;xf:fields&amp;gt; &amp;lt;xf:script script=&amp;#34;configs.getRunDateTime()&amp;#34; /&amp;gt; &amp;lt;/xf:fields&amp;gt; &amp;lt;member name=&amp;#34;date&amp;#34; /&amp;gt; &amp;lt;/axis&amp;gt; &amp;lt;axis name=&amp;#34;row&amp;#34;&amp;gt; &amp;lt;member name=&amp;#34;Price&amp;#34; value=&amp;#34;Price&amp;#34; /&amp;gt; &amp;lt;/axis&amp;gt; &amp;lt;axis name=&amp;#34;fact&amp;#34;&amp;gt; &amp;lt;xf:fields&amp;gt; &amp;lt;xf:query region=&amp;#34;div#price_tick&amp;#34; field=&amp;#34;\*&amp;#34; /&amp;gt; &amp;lt;/xf:fields&amp;gt; &amp;lt;/axis&amp;gt; &amp;lt;/dataDef&amp;gt; It defines a dataDef named price with three axes.</description>
    </item>
    
    <item>
      <title>Query Region Field - Gotz ETL - CodeTab</title>
      <link>https://www.codetab.org/tutorial/gotz-etl/query-region-field/</link>
      <pubDate>Fri, 11 Jan 2019 19:27:00 +0530</pubDate>
      
      <guid>https://www.codetab.org/tutorial/gotz-etl/query-region-field/</guid>
      <description>In this chapter we describe how to build query using JSoup Selectors and same holds good for XPath while using HtmlUnit.
Selectors In Example 1, we query price data from defs/examples/page/acme-quote.html page. The price snippet from this page is
&amp;lt;div id=&amp;#34;price_tick&amp;#34;&amp;gt; &amp;lt;span id=&amp;#34;price_tick_span&amp;#34;&amp;gt; &amp;lt;strong&amp;gt;315.25&amp;lt;/strong&amp;gt; &amp;lt;/span&amp;gt; &amp;lt;/div&amp;gt; To access the value the JSoup selector is
div#price_tick/* Use Chrome to get Selector
Chrome browser can assist you in constructing the Selector or XPath.</description>
    </item>
    
    <item>
      <title>Members Dynamic Query - Gotz ETL - CodeTab</title>
      <link>https://www.codetab.org/tutorial/gotz-etl/members-dynamic-query/</link>
      <pubDate>Fri, 11 Jan 2019 19:44:00 +0530</pubDate>
      
      <guid>https://www.codetab.org/tutorial/gotz-etl/members-dynamic-query/</guid>
      <description>This chapter explores extracting multiple values with members and dynamic query.
The Example 2 extracts snapshot data from defs/examples/page/acme-quote.html page
 MARKET CAP EPS (TTM) P/E P/C BOOK VALUE PRICE/BOOK DIV (%) DIV YIELD FACE VALUE INDUSTRY P/E  The snippet of HTML from the page is
&amp;lt;div id=&amp;#34;snapshot&amp;#34;&amp;gt; &amp;lt;div&amp;gt; &amp;lt;div&amp;gt; &amp;lt;div&amp;gt;MARKET CAP&amp;lt;/div&amp;gt; &amp;lt;div&amp;gt;382,642.57&amp;lt;/div&amp;gt; &amp;lt;div&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div&amp;gt; &amp;lt;div&amp;gt;P/E&amp;lt;/div&amp;gt; &amp;lt;div&amp;gt;-&amp;lt;/div&amp;gt; &amp;lt;div&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div&amp;gt; &amp;lt;div&amp;gt;BOOK VALUE&amp;lt;/div&amp;gt; &amp;lt;div&amp;gt;27.89&amp;lt;/div&amp;gt; &amp;lt;div&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; .... The datadef used to extract data from this page is</description>
    </item>
    
    <item>
      <title>IndexRange Index BreakAfter - Gotz ETL - CodeTab</title>
      <link>https://www.codetab.org/tutorial/gotz-etl/indexrange-index/</link>
      <pubDate>Fri, 11 Jan 2019 20:02:00 +0530</pubDate>
      
      <guid>https://www.codetab.org/tutorial/gotz-etl/indexrange-index/</guid>
      <description>This chapter explains the use of index, indexRange and dynamic query to extract set of data without using multiple queries.
Example 3 extracts data from defs/examples/page/acme-bs.html page, which contains Balance Sheet data of Acme for past five years in a HTML table with 27 rows and 5 columns. The partial contents of the table is shown below.
Dec &amp;lsquo;16
Dec &amp;lsquo;15
Dec &amp;lsquo;14
Dec &amp;lsquo;13
Dec &amp;lsquo;12
Equity
804.72</description>
    </item>
    
    <item>
      <title>Filters - Gotz ETL - CodeTab</title>
      <link>https://www.codetab.org/tutorial/gotz-etl/filters/</link>
      <pubDate>Fri, 11 Jan 2019 20:14:00 +0530</pubDate>
      
      <guid>https://www.codetab.org/tutorial/gotz-etl/filters/</guid>
      <description>In the previous example, which extracted balance sheet data there are some unwanted items and we use filter to remove them from output.
The filter is normally applied after parse is over and members are constructed. The Example-5, which loads defs/examples/jsoup/ex-5/job.xml uses filter in row axis and the filter snippet from the dataDef is as below
&amp;lt;axis name=&amp;#34;row&amp;#34;&amp;gt; .... &amp;lt;filter axis=&amp;#34;row&amp;#34;&amp;gt; &amp;lt;xf:fields&amp;gt; &amp;lt;xf:filters type=&amp;#34;value&amp;#34;&amp;gt; &amp;lt;xf:filter name=&amp;#34;blank&amp;#34; pattern=&amp;#34;&amp;#34; /&amp;gt; &amp;lt;xf:filter name=&amp;#34;f1&amp;#34; pattern=&amp;#34;Sources Of Funds&amp;#34; /&amp;gt; &amp;lt;xf:filter name=&amp;#34;f2&amp;#34; pattern=&amp;#34;Application Of Funds&amp;#34; /&amp;gt; &amp;lt;/xf:filters&amp;gt; &amp;lt;/xf:fields&amp;gt; &amp;lt;/filter&amp;gt; &amp;lt;/axis&amp;gt; This filter definition remove the members whose row axis value is blank, null or &amp;ldquo;Sources Of Funds&amp;rdquo; or &amp;ldquo;Application Of Funds&amp;rdquo;.</description>
    </item>
    
    <item>
      <title>Namespace - Gotz ETL - CodeTab</title>
      <link>https://www.codetab.org/tutorial/gotz-etl/namespace/</link>
      <pubDate>Fri, 11 Jan 2019 20:22:00 +0530</pubDate>
      
      <guid>https://www.codetab.org/tutorial/gotz-etl/namespace/</guid>
      <description>Gotz defines two XML Namespaces.
 http://codetab.org/gotz http://codetab.org/xfields  They are required in root element &amp;lt;gotz&amp;gt; in the definition files bean.xml and job.xml files
&amp;lt;gotz xmlns=&amp;#34;http://codetab.org/gotz&amp;#34; xmlns:xf=&amp;#34;http://codetab.org/xfields&amp;#34;&amp;gt; .... &amp;lt;/gotz&amp;gt; The namespace http://codetab.org/gotz is default namespace and it is set with xmlns attribute.
Gotz uses extensible fields (xfields) to pass user defined values to the classes and these fields uses namespace http://codetab.org/xfields and it is set in root element using xml:xf attribute with xf prefix.</description>
    </item>
    
    <item>
      <title>Tasks Steps - Gotz ETL - CodeTab</title>
      <link>https://www.codetab.org/tutorial/gotz-etl/tasks-steps/</link>
      <pubDate>Fri, 11 Jan 2019 20:30:00 +0530</pubDate>
      
      <guid>https://www.codetab.org/tutorial/gotz-etl/tasks-steps/</guid>
      <description>So far, we explored locators which defines the pages to scrape and dataDef which defines data to scrape from the pages. But, we haven&amp;rsquo;t defined how that work has to be carried out. This chapter defines Tasks and Steps which executes series of steps that use dataDef to scrape data from locator.
&amp;nbsp;   (adsbygoogle = window.adsbygoogle || []).push({});  &amp;nbsp; Tasks and Task The defs/examples/jsoup/ex-5/job.xml defines one task which applies dataDef named bs to locators of same group.</description>
    </item>
    
    <item>
      <title>Multiple Tasks - Gotz ETL - CodeTab</title>
      <link>https://www.codetab.org/tutorial/gotz-etl/multiple-task-tasks/</link>
      <pubDate>Fri, 11 Jan 2019 20:43:00 +0530</pubDate>
      
      <guid>https://www.codetab.org/tutorial/gotz-etl/multiple-task-tasks/</guid>
      <description>We can define multiple task for tasks and also, multiple tasks are allowed in a job file.
The Example-1 scrapes Price data from acme-quote.html page while Example-2 extracts Snapshot data from the same page. We can add these two task within tasks element.
But before doing that let&amp;rsquo;s introduce one more feature - steps reference - which extracts steps into separate entity which can be used by both tasks.</description>
    </item>
    
    <item>
      <title>Converters - Gotz ETL - CodeTab</title>
      <link>https://www.codetab.org/tutorial/gotz-etl/converters/</link>
      <pubDate>Fri, 11 Jan 2019 20:56:00 +0530</pubDate>
      
      <guid>https://www.codetab.org/tutorial/gotz-etl/converters/</guid>
      <description>In this chapter we cover step override and converters.
Step Override When using common steps, we can override any step at task level.
In Example-8, defs/examples/jsoup/ex-8/job.xml, we override DataConverter step of commonSteps in bs task. The relevant snippet is shown below
&amp;lt;steps name=&amp;#34;commonSteps&amp;#34;&amp;gt; ... &amp;lt;step name=&amp;#34;converter&amp;#34; class=&amp;#34;org.codetab.gotz.step.convert.DataConverter&amp;#34;&amp;gt; &amp;lt;nextStep&amp;gt;appender&amp;lt;/nextStep&amp;gt; &amp;lt;/step&amp;gt; .... &amp;lt;/steps&amp;gt; &amp;lt;tasks name=&amp;#34;quote tasks&amp;#34; group=&amp;#34;quote&amp;#34;&amp;gt; &amp;lt;task name=&amp;#34;snapshot task&amp;#34; dataDef=&amp;#34;snapshot&amp;#34;&amp;gt; &amp;lt;steps ref=&amp;#34;commonSteps&amp;#34; /&amp;gt; &amp;lt;/task&amp;gt; .... &amp;lt;/tasks&amp;gt; &amp;lt;tasks name=&amp;#34;bs&amp;#34; group=&amp;#34;bs&amp;#34;&amp;gt; &amp;lt;task name=&amp;#34;bs&amp;#34; dataDef=&amp;#34;bs&amp;#34;&amp;gt; &amp;lt;steps ref=&amp;#34;commonSteps&amp;#34;&amp;gt; &amp;lt;step name=&amp;#34;converter&amp;#34; class=&amp;#34;org.</description>
    </item>
    
    <item>
      <title>Persistence - Gotz ETL - CodeTab</title>
      <link>https://www.codetab.org/tutorial/gotz-etl/persistence/</link>
      <pubDate>Fri, 11 Jan 2019 21:10:00 +0530</pubDate>
      
      <guid>https://www.codetab.org/tutorial/gotz-etl/persistence/</guid>
      <description>With persistence, Gotz offers following benefits.
 reduce network usage as it can reuse the downloaded pages recover from the aborted run without redoing the tasks already completed avoid expensive parse operation as it can reuse the persisted data set expiry date for each page  If you installed Gotz from GitHub, then to run examples with persistence we need to setup database. We explain how to install and setup HSQLDB as it is the easy one.</description>
    </item>
    
    <item>
      <title>Appenders Encoders - Gotz ETL - CodeTab</title>
      <link>https://www.codetab.org/tutorial/gotz-etl/appenders-encoders/</link>
      <pubDate>Fri, 11 Jan 2019 21:17:00 +0530</pubDate>
      
      <guid>https://www.codetab.org/tutorial/gotz-etl/appenders-encoders/</guid>
      <description>Gotz uses appenders to append data to output and encoders to encode (alter the output format) the output. At present, it comes with two appenders - FileAppender and DbAppender.
FileAppender So far, all examples use FileAppender which is defined as follows
&amp;lt;steps name=&amp;#34;commonSteps&amp;#34;&amp;gt; ... other steps ... &amp;lt;step name=&amp;#34;appender&amp;#34; class=&amp;#34;org.codetab.gotz.step.load.DataAppender&amp;#34;&amp;gt; &amp;lt;nextStep&amp;gt;end&amp;lt;/nextStep&amp;gt; &amp;lt;appender name=&amp;#34;file&amp;#34; class=&amp;#34;org.codetab.gotz.step.load.appender.FileAppender&amp;#34;&amp;gt; &amp;lt;encoder name=&amp;#34;csv&amp;#34; class=&amp;#34;org.codetab.gotz.step.load.encoder.CsvEncoder&amp;#34;&amp;gt; &amp;lt;delimiter&amp;gt;,&amp;lt;/delimter&amp;gt; &amp;lt;/encoder&amp;gt; &amp;lt;file&amp;gt;output/data.txt&amp;lt;/file&amp;gt; &amp;lt;/appender&amp;gt; &amp;lt;/step&amp;gt; &amp;lt;/steps&amp;gt; To use appenders, first we must define a step that uses class DataAppender and this class is responsible for creation of appenders.</description>
    </item>
    
    <item>
      <title>Split Definitions - Gotz ETL - CodeTab</title>
      <link>https://www.codetab.org/tutorial/gotz-etl/split-definitions/</link>
      <pubDate>Fri, 11 Jan 2019 21:31:00 +0530</pubDate>
      
      <guid>https://www.codetab.org/tutorial/gotz-etl/split-definitions/</guid>
      <description>The definition file job.xml tends to grow as you scrape more and more data sets or pages. This chapter explains how to split the definitions into multiple files for easy maintenance.
Gotz allows you to split the definitions either on job types or on model types.
&amp;nbsp;   (adsbygoogle = window.adsbygoogle || []).push({});  &amp;nbsp; Split on Job Types The examples so far scraped BS, PL, Quote data - price and snapshot - of Acme.</description>
    </item>
    
  </channel>
</rss>