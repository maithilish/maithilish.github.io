<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Testing on Codetab</title>
    <link>https://www.codetab.org/tutorial/wordpress-plugin-development/unit-test/</link>
    <description>Recent content in Testing on Codetab</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 11 Jan 2019 23:03:00 +0530</lastBuildDate>
    
	<atom:link href="https://www.codetab.org/tutorial/wordpress-plugin-development/unit-test/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Unit Test - WordPress Plugin Development - CodeTab</title>
      <link>https://www.codetab.org/tutorial/wordpress-plugin-development/unit-test/plugin-unit-testing/</link>
      <pubDate>Fri, 11 Jan 2019 12:56:00 +0530</pubDate>
      
      <guid>https://www.codetab.org/tutorial/wordpress-plugin-development/unit-test/plugin-unit-testing/</guid>
      <description>Plugin Unit Test One of the challenges that we faced while developing the Share on Social Plugin was to setup unit tests. Many tutorials and blogs on the subject and even the official WordPress documentation couldn&amp;rsquo;t help us much to overcome the initial hurdles. Knowing well the difficulties faced by the beginners, some developers have packaged and hosted the testing frameworks for WordPress on GitHub to ease the setup but they are unable to reduce the overall confusion.</description>
    </item>
    
    <item>
      <title>Test Setup - WordPress Plugin Development - CodeTab</title>
      <link>https://www.codetab.org/tutorial/wordpress-plugin-development/unit-test/setup/</link>
      <pubDate>Fri, 11 Jan 2019 13:24:00 +0530</pubDate>
      
      <guid>https://www.codetab.org/tutorial/wordpress-plugin-development/unit-test/setup/</guid>
      <description>12.2. WordPress Test Setup In the previous blog, WordPress PHPUnit Setup we put up all the scaffolding necessary to run WordPress Plugin Tests. In this blog, we test the setup by running some test cases.
Run Test Cases The test cases are placed in plugins&amp;rsquo; tests/phpunit/tests folder. Let&amp;rsquo;s start with a test case to test the constants defined in the wp-simple-plugin.php. Add a test file test-wp-simple-plugin.php to tests/phpunit/tests with following contents.</description>
    </item>
    
    <item>
      <title>Simple Unit Test - WordPress Plugin Development - CodeTab</title>
      <link>https://www.codetab.org/tutorial/wordpress-plugin-development/unit-test/simple-unit-tests/</link>
      <pubDate>Fri, 11 Jan 2019 13:07:00 +0530</pubDate>
      
      <guid>https://www.codetab.org/tutorial/wordpress-plugin-development/unit-test/simple-unit-tests/</guid>
      <description>12.3. WordPress Plugin Simple Unit Tests In the previous blog, we setup PHPUnit for WordPress Plugin and verified the setup with a Simple Plugin. The rest of the blog explains various types of unit tests we used to test the Share on Social Plugin.
The real hurdle in testing a plugin is to understand the WordPress architecture and write the appropriate tests for it. For better understanding, we selected various types of methods that are typical to a plugin and explain how to test them.</description>
    </item>
    
    <item>
      <title>Unit Test Scripts Action Filter - WordPress Plugin Development - CodeTab</title>
      <link>https://www.codetab.org/tutorial/wordpress-plugin-development/unit-test/scripts-actions-filters/</link>
      <pubDate>Fri, 11 Jan 2019 13:30:00 +0530</pubDate>
      
      <guid>https://www.codetab.org/tutorial/wordpress-plugin-development/unit-test/scripts-actions-filters/</guid>
      <description>12.4. Unit Test Scripts, Actions, Filters In the previous blog, we saw how to write tests for plugin methods that returns value or echo output. In this blog, we explore third category of plugin methods where outcome is tested using corresponding WordPress API functions.
For example, add_action() which registers an action hook is tested using WordPress function has_action().
But, before exploring such tests, we briefly explain an utility class used by Share on Social Plugin test cases to reduce boilerplate code in tests and also, learn to toggle user capability to test methods which depends on user capability.</description>
    </item>
    
    <item>
      <title>Advanced Unit Tests - WordPress Plugin Development - CodeTab</title>
      <link>https://www.codetab.org/tutorial/wordpress-plugin-development/unit-test/advanced-unit-tests/</link>
      <pubDate>Fri, 11 Jan 2019 13:36:00 +0530</pubDate>
      
      <guid>https://www.codetab.org/tutorial/wordpress-plugin-development/unit-test/advanced-unit-tests/</guid>
      <description>12.5. WordPress Advanced Unit Tests In the previous blog we saw tests that uses WordPress API functions to investigate the outcome of a method. However, such WordPress functions which are helpful to write tests are few, and to test majority of plugin methods, we need to rely on WordPress global variables and classes. Many WordPress functions store information in global variables or in classes which is used later to construct the output i.</description>
    </item>
    
    <item>
      <title>Test Internationalization - WordPress Plugin Development - CodeTab</title>
      <link>https://www.codetab.org/tutorial/wordpress-plugin-development/unit-test/internationalization-functions/</link>
      <pubDate>Fri, 11 Jan 2019 13:50:00 +0530</pubDate>
      
      <guid>https://www.codetab.org/tutorial/wordpress-plugin-development/unit-test/internationalization-functions/</guid>
      <description># Test Internationalization Functions
Share on Social Plugin uses WordPress Internationalization (i18n) functions extensively and we need an easy method to test the string translations. In this blog, we explain the unit tests of i18n functions.
Setup Language Files for Tests In WordPress Localization, we installed GetText software required for WordPress i18n and l10n, and also generated language files for the plugin.
To test plugin internationalization, we require separate set of language files.</description>
    </item>
    
    <item>
      <title>Ajax Unit Tests - WordPress Plugin Development - CodeTab</title>
      <link>https://www.codetab.org/tutorial/wordpress-plugin-development/unit-test/ajax/</link>
      <pubDate>Fri, 11 Jan 2019 13:44:00 +0530</pubDate>
      
      <guid>https://www.codetab.org/tutorial/wordpress-plugin-development/unit-test/ajax/</guid>
      <description>12.7. WordPress Plugin Ajax Unit Tests In the previous six blogs, we gone through the unit tests for the WordPress plugin regular methods. In this blog, we explore WordPress Plugin Ajax unit tests.
The normal test cases extend WP_UnitTestCase. For Ajax unit tests, WordPress Test Library comes with a separate class WP_Ajax_UnitTestCase. Moreover, the construction of the test methods are also bit different from the regular ones.
Ajax Test Case Group and Files While normal test cases takes very little time to complete, WordPress Plugin Ajax tests are inherently very slow.</description>
    </item>
    
    <item>
      <title>Multi Site Unit Test - WordPress Plugin Development - CodeTab</title>
      <link>https://www.codetab.org/tutorial/wordpress-plugin-development/unit-test/multisite-plugin-unit-tests/</link>
      <pubDate>Fri, 11 Jan 2019 14:12:00 +0530</pubDate>
      
      <guid>https://www.codetab.org/tutorial/wordpress-plugin-development/unit-test/multisite-plugin-unit-tests/</guid>
      <description>12.8. WordPress Multisite Plugin Unit Tests In the previous blogs we covered single site unit tests. In this concluding blog of the series, we explain WordPress Multisite Plugin unit tests.
As explained earlier, WordPress Test Lib creates an in-memory WordPress instance to run unit tests. The test instance is actually a WordPress single site installation and it is not useful to carryout the multisite tests.
In Enable WordPress Multisite, we saw how to go about WordPress Multisite Installation wherein we used wp-config.</description>
    </item>
    
  </channel>
</rss>