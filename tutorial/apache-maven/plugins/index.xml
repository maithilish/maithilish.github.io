<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Plugins on Codetab</title>
    <link>http://www.codetab.org/tutorial/apache-maven/plugins/</link>
    <description>Recent content in Plugins on Codetab</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 11 Jan 2019 23:03:00 +0530</lastBuildDate>
    
	<atom:link href="http://www.codetab.org/tutorial/apache-maven/plugins/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Plugins - Apache Maven Tutorial – CodeTab</title>
      <link>http://www.codetab.org/tutorial/apache-maven/plugins/maven-plugins/</link>
      <pubDate>Fri, 11 Jan 2019 15:25:00 +0530</pubDate>
      
      <guid>http://www.codetab.org/tutorial/apache-maven/plugins/maven-plugins/</guid>
      <description>Maven Plugins The previous chapter explained the concept of Maven Lifecycle and Phases. Lifecycle phases are just steps without any capability to carryout some task and they delegate the actual work to Maven Plugins.
This chapter on Maven Plugins cover plugins goal, how they bind with lifecycle phases and plugin configuration.
The Maven core is small and it&amp;rsquo;s just capable of parsing XML files such as pom.xml and manage lifecycle and phases.</description>
    </item>
    
    <item>
      <title>Plugin Goals - Apache Maven Tutorial – CodeTab</title>
      <link>http://www.codetab.org/tutorial/apache-maven/plugins/maven-plugin-goals/</link>
      <pubDate>Fri, 11 Jan 2019 16:39:00 +0530</pubDate>
      
      <guid>http://www.codetab.org/tutorial/apache-maven/plugins/maven-plugin-goals/</guid>
      <description>Maven Plugin Goals Maven plugin is a collection of one or more goals which do some task or job. It is also known as Mojo - Maven Plain Old Java Object.
For example, Maven uses maven-surefire-plugin to run tests and it comes with two goals.
 Similarly, Maven uses maven-compiler-plugin to compile the source and test files and it provides three goals - compiler:compile, compiler:testCompile and compiler:help.
&amp;nbsp;   (adsbygoogle = window.</description>
    </item>
    
    <item>
      <title>Lifecycle Goals - Apache Maven Tutorial – CodeTab</title>
      <link>http://www.codetab.org/tutorial/apache-maven/plugins/maven-lifecycle-goals/</link>
      <pubDate>Fri, 11 Jan 2019 16:21:00 +0530</pubDate>
      
      <guid>http://www.codetab.org/tutorial/apache-maven/plugins/maven-lifecycle-goals/</guid>
      <description>Maven Lifecycle and Goals The previous section covered plugin goals and how to run goals from command line. In very few situations we invoke plugin goals directly and more often than not, lifecycle phases are preferred. In this chapter, we describe the link between Maven Lifecycle and Goals.
Lifecycle Phases and Plugin Goals When a lifecycle phase is run, depending on project type and packaging type, Maven binds plugin goals to lifecycle phases.</description>
    </item>
    
    <item>
      <title>Plugin Configuration - Apache Maven Tutorial – CodeTab</title>
      <link>http://www.codetab.org/tutorial/apache-maven/plugins/maven-plugin-configuration/</link>
      <pubDate>Fri, 11 Jan 2019 16:13:00 +0530</pubDate>
      
      <guid>http://www.codetab.org/tutorial/apache-maven/plugins/maven-plugin-configuration/</guid>
      <description>Maven Plugin Configuration Till now we used a basic POM that has only the project coordinates, and explored the out-of-the-box behavior of Maven core and plugins. In this tutorial, we cover the plugin configuration.
To configure plugins, we use project build element in pom.xml. The next listing shows the top level elements used to configure a plugin.
pom.xml
&amp;lt;project&amp;gt; ... &amp;lt;build&amp;gt; ... &amp;lt;plugins&amp;gt; &amp;lt;plugin&amp;gt; &amp;lt;groupId&amp;gt;...&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;...&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;...&amp;lt;/version&amp;gt; &amp;lt;configuration&amp;gt;...&amp;lt;/configuration&amp;gt; &amp;lt;executions&amp;gt; &amp;lt;execution&amp;gt;.</description>
    </item>
    
    <item>
      <title>Plugin Execution - Apache Maven Tutorial – CodeTab</title>
      <link>http://www.codetab.org/tutorial/apache-maven/plugins/maven-plugin-execution/</link>
      <pubDate>Fri, 11 Jan 2019 16:48:00 +0530</pubDate>
      
      <guid>http://www.codetab.org/tutorial/apache-maven/plugins/maven-plugin-execution/</guid>
      <description>Maven Plugin Execution In the previous tutorial, we saw plugin configuration. In this tutorial, we cover the Maven Plugin execution configuration.
Configure Plugin Execution The element &amp;lt;executions&amp;gt;/&amp;lt;execution&amp;gt; allows you to configure the execution of a plugin goal. With it, you can accomplish the following things.
 bind a plugin goal to a lifecycle phase.
 configure plugin parameters of a specific goal.
 configure plugin parameters of a specific goal such as compiler:compile, surefire:test etc.</description>
    </item>
    
    <item>
      <title>Project Object Model - POM - Apache Maven Tutorial – CodeTab</title>
      <link>http://www.codetab.org/tutorial/apache-maven/plugins/maven-project-object-model/</link>
      <pubDate>Fri, 11 Jan 2019 17:00:00 +0530</pubDate>
      
      <guid>http://www.codetab.org/tutorial/apache-maven/plugins/maven-project-object-model/</guid>
      <description>Maven Project Object Model So far in the handbook, we used bit and pieces of Maven POM (pom.xml) without going to deep into the subject. In this section, we formally introduce Maven Project Object Model (POM), one of the central concept of Maven. Having gone through other concepts such as lifecycle phase, plugins and goals, we can now put many aspects of POM into perspective than before.
In POM, we declare project&amp;rsquo;s identity and structure, configure builds, and relate projects to one another.</description>
    </item>
    
    <item>
      <title>Resources Plugin - Apache Maven Tutorial – CodeTab</title>
      <link>http://www.codetab.org/tutorial/apache-maven/plugins/maven-resources-plugin/</link>
      <pubDate>Fri, 11 Jan 2019 15:41:00 +0530</pubDate>
      
      <guid>http://www.codetab.org/tutorial/apache-maven/plugins/maven-resources-plugin/</guid>
      <description>Maven Resource Plugin The previous chapter of the guide covered basics of Maven Plugins. This chapter explains Maven Resources Plugin which Maven uses to handle the project resources.
Resources are non source files of the project such as properties files, XML configuration files, shell scripts files and also, binary files like images etc., Maven Resources Plugin (plugin prefix resources) copies resource files from source directories to output directory. Apart from the standard resources:help goal, the plugin has three goals:</description>
    </item>
    
    <item>
      <title>Manage Directories - Apache Maven Tutorial – CodeTab</title>
      <link>http://www.codetab.org/tutorial/apache-maven/plugins/manage-maven-directories/</link>
      <pubDate>Fri, 11 Jan 2019 15:00:00 +0530</pubDate>
      
      <guid>http://www.codetab.org/tutorial/apache-maven/plugins/manage-maven-directories/</guid>
      <description>Manage Directories In the previous chapter, while explaining the Effective POM we saw how Maven configures the various directories of a Maven project. In this chapter, we show how to manage Maven directories.
Projects gain much by adapting to the Maven default directory layout. However, when migrating an existing project that is generated by an IDE or project that is using other build systems such as Apache Ant, you may wish to retain the existing directory structure and postpone the project restructuring to another day.</description>
    </item>
    
    <item>
      <title>Archetype Plugin - Apache Maven Tutorial – CodeTab</title>
      <link>http://www.codetab.org/tutorial/apache-maven/plugins/maven-archetype-plugin/</link>
      <pubDate>Fri, 11 Jan 2019 14:42:00 +0530</pubDate>
      
      <guid>http://www.codetab.org/tutorial/apache-maven/plugins/maven-archetype-plugin/</guid>
      <description>Maven Archetype Plugin In the previous tutorial, we covered Maven Resources Plugin. In this tutorial, we introduce Maven Archetype Plugin.
An archetype is a template for a Maven project which is used by the Maven Archetype plugin to create new projects. Simply put, it generates skeleton for different types of projects.
To better understand, lets create a new project using Maven Archetype Plugin.
$ mvn archetype:generate -DgroupId=com.xyz -DartifactId=my-app -Dversion=1.0 -DpackageName=com.</description>
    </item>
    
    <item>
      <title>Useful Help Commands - Apache Maven Tutorial – CodeTab</title>
      <link>http://www.codetab.org/tutorial/apache-maven/plugins/useful-maven-help-commands/</link>
      <pubDate>Fri, 11 Jan 2019 14:20:00 +0530</pubDate>
      
      <guid>http://www.codetab.org/tutorial/apache-maven/plugins/useful-maven-help-commands/</guid>
      <description>Maven Help Command When we are struck with some aspect of Maven, Plugin&amp;rsquo;s Help goal and Maven Help Plugin comes handy to navigate output of the situation.
Here we present some the useful Maven help commands as reference.
Find Plugin Prefix In almost all Maven plugin related commands we need to use Plugin Prefix. We can find plugin prefixes in Maven Plugin Directory. The first column of the table contains the Plugin Prefixes.</description>
    </item>
    
  </channel>
</rss>